whitelist_rules:
  # Delegate protocols should be class-only so they can be weakly referenced.
  - class_delegate_protocol
  # Closing brace with closing parenthesis should not have any whitespaces in the middle.
  - closing_brace
  # Closure end should have the same indentation as the line that started it.
  - closure_end_indentation
  # Closure parameters should be on the same line as opening brace.
  - closure_parameter_position
  # Closure expressions should have a single space inside each brace.
  - closure_spacing
  # There should be no space before and one after any comma.
  - comma
  # The initializers declared in compiler protocols such as `ExpressibleByArrayLiteral` shouldn't be called directly.
  - compiler_protocol_init
  # Conditional statements should always return on the next line
  # - conditional_returns_on_newline
  # if,for,while,do statements shouldn't wrap their conditionals in parentheses.
  - control_statement
  # Complexity of function bodies should be limited.
  # - cyclomatic_complexity
  # When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later.
  - discarded_notification_center_observer
  # avoid using 'dynamic' and '@inline(__always)' together.
  - dynamic_inline
  # Prefer checking `isEmpty` over comparing `count` to zero.
  # - empty_count
  # Prefer `() -> ` over `Void -> `.
  - empty_parameters
  # When using trailing closures, empty parentheses should be avoided after the method call.
  - empty_parentheses_with_trailing_closure
  # Explicitly calling .init() should be avoided.
  - explicit_init
  # Properties should have a type interface
  # - explicit_type_interface
  # A fatalError call should have a message.
  - fatal_error_message
  # Files should not span too many lines.
  - file_length
  # Prefer using `.first(where:)` over `.filter { }.first` in collections.
  - first_where
  # `where` clauses are preferred over a single `if` inside a `for`.
  - for_where
  # Force casts should be avoided.
  - force_cast
  # Force tries should be avoided.
  - force_try
  # Force unwrapping should be avoided.
  - force_unwrapping
  # Number of function parameters should be low.
  - function_parameter_count
  # Generic type name should only contain alphanumeric characters, start with an uppercase character and span between 1 and 20 characters in length.
  - generic_type_name
  # Identifier names should only contain alphanumeric characters and
  # start with a lowercase character or should only contain capital letters.
  # In an exception to the above, variable names may start with a capital letter
  # when they are declared static and immutable. Variable names should not be too
  # long or too short.
  # - identifier_name
  # Computed read-only properties should avoid using the get keyword.
  - implicit_getter
  # Files should not contain leading whitespace.
  - leading_whitespace
  # Struct extension properties and methods are preferred over legacy functions
  - legacy_cggeometry_functions
  # Struct-scoped constants are preferred over legacy global constants.
  - legacy_constant
  # Swift constructors are preferred over legacy convenience functions.
  - legacy_constructor
  # Struct extension properties and methods are preferred over legacy functions
  - legacy_nsgeometry_functions
  # Lines should not span too many characters.
  - line_length
  # MARK comment should be in valid format.
  - mark
  # Public declarations should be documented.
  - missing_docs
  # Types should be nested at most 1 level deep, and statements should be nested at most 5 levels deep."
  - nesting
  # An object should only remove itself as an observer in `deinit`.
  - notification_center_detachment
  # Prefer object literals over image and color inits.
  # - object_literal
  # Opening braces should be preceded by a single space and on the same line " +
  # as the declaration.
  - opening_brace
  # Operators should be surrounded by a single whitespace when defining them.
  - operator_whitespace
  # Operators should be surrounded by a single whitespace " +
  # when they are being used.
  - operator_usage_whitespace
  # Some overridden methods should always call super
  - overridden_super_call
  # IBOutlets should be private to avoid leaking UIKit to higher layers.
  # - private_outlet
  # Unit tests marked private are silently skipped.
  - private_unit_test
  # Prefer `_ = foo()` over `let _ = foo()` when discarding a result from a function.
  - redundant_discardable_let
  # nil coalescing operator is only evaluated if the lhs is nil" +
  # , coalescing operator with nil as rhs is redundant"
  - redundant_nil_coalescing
  # Initializing an optional variable with nil is redundant.
  - redundant_optional_initialization
  # String enum values can be omitted when they are equal to the enumcase name.
  - redundant_string_enum_value
  # Returning Void in a function declaration is redundant.
  - redundant_void_return
  # Return arrow and return type should be separated by a single space or on a " +
  # separate line.
  - return_arrow_whitespace
  # Prefer shorthand operators (+=, -=, *=, /=) over doing the operation and assigning.
  - shorthand_operator
  # Imports should be sorted.
  # - sorted_imports
  # Else and catch should be on the same line, one space after the previous " +
  # declaration.
  - statement_position
  # Cases inside a switch should always be on a newline
  - switch_case_on_newline
  # Shorthand syntactic sugar should be used, i.e. [Int] instead of Array<Int>
  - syntactic_sugar
  # Trailing commas in arrays and dictionaries should be avoided/enforced.
  - trailing_comma
  # Lines should not have trailing semicolons.
  - trailing_semicolon
  # Unused parameter in a closure should be replaced with _.
  - unused_closure_parameter
  # When the index or the item is not used, `.enumerated()` can be removed.
  - unused_enumerated
  # Documented declarations should be valid.
  - valid_docs
  # @IBInspectable should be applied to variables only, have its type explicit
  - valid_ibinspectable
  # Function parameters should be aligned vertically if they're in multiple lines in a declaration.
  - vertical_parameter_alignment
  # Limit vertical whitespace to a single empty line.
  - vertical_whitespace
  # Prefer `-> Void` over `-> ()`.
  - void_return
  # Delegates should be weak to avoid reference cycles.
  - weak_delegate
included: # paths to include during linting. `--path` is ignored if present.
  - DemoCleanArchitecture-IOS
excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods
reporter: "xcode"
